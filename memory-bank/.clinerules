# .clinerules for Video Subtitling Tool

## Project Patterns

### Naming Conventions
- Use snake_case for all Python files, functions, and variables
- Use CamelCase for class names
- Prefix private functions and variables with underscore (_)

### Code Structure
- Each module should have a clear, single responsibility
- Include docstrings for all modules, classes, and functions
- Use type hints for function parameters and return values
- Keep functions small and focused on a single task

### Command Execution
- Use subprocess.run() for executing external commands
- Always capture and handle stdout and stderr
- Include timeout parameters for long-running processes
- Check return codes for all external command executions

### File Handling
- Use pathlib.Path for all file path operations
- Use context managers (with statements) for file operations
- Always validate file existence before operations
- Handle file permissions and access errors gracefully

### Error Handling
- Use specific exception types rather than generic exceptions
- Provide clear error messages with context
- Log errors with appropriate severity levels
- Clean up temporary resources in finally blocks

## User Preferences
- Create new output files rather than modifying originals
- Position subtitles in the lower third, centered
- Provide clear progress indicators during processing
- Maintain a clean, minimal command-line interface

## Implementation Notes
- Whisper is used with `--task translate` for direct German-to-English translation
- FFmpeg subtitle embedding uses the subtitles filter with force_style
- Temporary files are created for intermediate processing steps
- SRT format is used for subtitle files

## Known Challenges
- Whisper processing can be slow for longer videos
- FFmpeg command syntax is complex and error-prone
- Audio quality significantly affects transcription accuracy
- Temporary files need careful management and cleanup
